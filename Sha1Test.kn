{
	Sha1Test.kn v1.00 (for Kuin 1.01):
		Last Modified: 2014/03/24 00:00:48.
		Created by Tatt(@tatt61880)
		https://twitter.com/tatt61880
		https://github.com/tatt61880
}
func Main()
	func str2bin(str: []char): []byte8
		var ret: []byte8 :: #[0]byte8
		foreach c(str)
			do ret :~ [c $ byte8]
		end foreach
		return ret
	end func
	func bin2str(bin: []byte8): []char
		var ret: []char :: #[0]char
		foreach b(bin)
			do ret :~ [b $ char]
		end foreach
		return ret
	end func
	var testarray: [][]byte8 :: #[4][]byte8
	do testarray[0] :: str2bin("abc")
	do testarray[1] :: str2bin("abcdbcdecdefdefgefghfghighijhi" ~ "jkijkljklmklmnlmnomnopnopq")
	do testarray[2] :: str2bin("a")
	do testarray[3] :: str2bin("01234567012345670123456701234567" ~ "01234567012345670123456701234567")

	var repeatcount: []int :: [1, 1, 1000000, 10]
	var resultarray: [][]char :: #[4][]char
	do resultarray[0] :: "A9 99 3E 36 47 06 81 6A BA 3E 25 71 78 50 C2 6C 9C D0 D8 9D"
	do resultarray[1] :: "84 98 3E 44 1C 3B D2 6E BA AE 4A A1 F9 51 29 E5 E5 46 70 F1"
	do resultarray[2] :: "34 AA 97 3C D4 C4 DA A4 F6 1E EB 2B DB AD 27 31 65 34 01 6F"
	do resultarray[3] :: "DE A3 56 A2 CD DD 90 C7 A7 EC ED C5 EB B5 63 93 4F 46 04 52"

	var sha: Sha1@CContext :: (#Sha1@CContext).Init()
	var err: Sha1@EResult

	var Message_Digest: []byte8 :: #[20]byte8

	{Perform SHA-1 tests}
	for j(0, 3)
		do Dbg@Log("Test " ~ (j + 1).ToStr() ~ ": repeatcount=" ~ repeatcount[j].ToStr() ~ ", '" ~ bin2str(testarray[j]) ~ "'" ~ "(length=" ~ testarray[j].Len().ToStr() ~ ")")

		do err :: Sha1@Reset(sha)
		if(err <> Sha1@EResult#shaSuccess)
			do Dbg@Log("SHA1Reset Error " ~ (err $ int).ToStr() ~ ".")
			break j
		end if

		for i(0, repeatcount[j] - 1)
			do err :: Sha1@Input(sha, testarray[j], testarray[j].Len())
			if(err <> Sha1@EResult#shaSuccess)
				do Dbg@Log("SHA1@Input Error " ~ (err $ int).ToStr() ~ ".")
				break i
			end if
		end for

		do err :: Sha1@Result(sha, Message_Digest)
		if(err <> Sha1@EResult#shaSuccess)
			do Dbg@Log("SHA1Result Error " ~ (err $ int).ToStr() ~ ", could not compute message digest.")
		else
			var str: []char :: ""
			for i(0, 19)
				do str :~ (i = 0) ?("", " ")
				do str :~ (Message_Digest[i] $ int).ToStrF("02X")
			end for
			do Dbg@Log(str)
			if(str = resultarray[j])
				do Dbg@Log("\tResult: Correct!")
			else
				do Dbg@Log("\tResult: Failed.")
				do Dbg@Log("Should match:")
				do Dbg@Log("\t" ~ resultarray[j])
			end if
		end if
	end for

	{Test some error returns}
	do err :: Sha1@Input(sha, testarray[1], 1)
	do Dbg@Log("Error " ~ (err $ int).ToStr() ~ ". Should be " ~ (Sha1@EResult#shaStateError $ int).ToStr() ~ ".")
	do err :: Sha1@Reset(null)
	do Dbg@Log("Error " ~ (err $ int).ToStr() ~ ". Should be " ~ (Sha1@EResult#shaNull $ int).ToStr() ~ ".")
end func
