{
	sha1.kn:
		Last Modified: 2017/04/22 20:08:03.
		Created by Tatt(@tatt61880)
		https://twitter.com/tatt61880
		https://github.com/tatt61880

	SHA-1のハッシュを作成するライブラリです。
	参考:
		http://ja.wikipedia.org/wiki/SHA-1

	下記のページ内のコードを参考に作成しました。
		http://www.ipa.go.jp/security/rfc/RFC3174JA.html
}

const sha1hashSize: int :: 20

+enum Result
	shaSuccess :: 0
	shaNull			{Null pointer parameter}
	shaInputTooLong	{input data too long}
	shaStateError	{called input after result}
end enum

+class Context()
	+var intermediateHash: []bit32 {Message Digest}
	+var lengthLow: bit32	{Message length in bits}
	+var lengthHigh: bit32	{Message length in bits}
	+var messageBlockIndex: int	{Index into message block array}
	+var messageBlock: []bit8	{512-bit message blocks}
	+var computed: bool	{Is the digest computed?}
	+var state: @Result	{Is the message digest corrupted?}
	*func ctor()
		do me.intermediateHash :: #[@sha1hashSize / 4]bit32
		do me.messageBlock :: #[64]bit8
	end func
end class

func circularShift(bits: int, word: bit32): bit32
	ret word.shl(bits).or(word.shr(32 - bits))
end func

+func reset(context: @Context): @Result
	if(context =& null)
		ret %shaNull
	end if

	do context.lengthLow			:: 0b32
	do context.lengthHigh			:: 0b32
	do context.messageBlockIndex	:: 0

	do context.intermediateHash[0]	:: 16#67452301b32
	do context.intermediateHash[1]	:: 16#EFCDAB89b32
	do context.intermediateHash[2]	:: 16#98BADCFEb32
	do context.intermediateHash[3]	:: 16#10325476b32
	do context.intermediateHash[4]	:: 16#C3D2E1F0b32

	do context.computed	:: false
	do context.state	:: %shaSuccess

	ret %shaSuccess
end func

+func result(context: @Context, messageDigest: []bit8): @Result
	if(context =& null | messageDigest =& null)
		ret %shaNull
	end if

	if(context.state <> %shaSuccess)
		ret context.state
	end if

	if(!context.computed)
		do @padMessage(context)
		for i(0, 63)
			{message may be sensitive, clear it out}
			do context.messageBlock[i] :: 0b8
		end for
		do context.lengthLow :: 0b32	{and clear length}
		do context.lengthHigh :: 0b32
		do context.computed :: true
	end if

	for i(0, @sha1hashSize - 1)
		do messageDigest[i] :: context.intermediateHash[(i $ bit8).shr(2) $ int].shr(8 * (3 - ((i $ bit8).and(16#03b8) $ int))) $ bit8
	end for

	ret %shaSuccess
end func

+func input(context: @Context, messageArray: []bit8, length: int): @Result
	if(length = 0)
		ret %shaSuccess
	end if

	if(context =& null | messageArray =& null)
		ret %shaNull
	end if

	if(context.computed)
		do context.state :: %shaStateError
		ret %shaStateError
	end if

	if(context.state <> %shaSuccess)
		ret context.state
	end if

	var messageArrayIndex: int :: 0
	while(length <> 0 & context.state = %shaSuccess)
		do length :- 1
		do context.messageBlock[context.messageBlockIndex] :: messageArray[messageArrayIndex]
		do context.messageBlockIndex :+ 1

		do context.lengthLow :+ 8b32
		if(context.lengthLow = 0b32)
			do context.lengthHigh :+ 1b32
			if(context.lengthHigh = 0b32)
				{Message is too long}
				do context.state :: %shaNull
			end if
		end if

		if(context.messageBlockIndex = 64)
			do @processMessageBlock(context)
		end if
		do messageArrayIndex :+ 1
	end while

	ret %shaSuccess
end func


func processMessageBlock(context: @Context)
	var k: []bit32 :: [16#5A827999b32, 16#6ED9EBA1b32, 16#8F1BBCDCb32, 16#CA62C1D6b32] {Constants defined in SHA-1}
	var temp: bit32					{Temporary word value}
	var w: []bit32 :: #[80]bit32	{Word sequence}
	var a: bit32 {Word buffers}
	var b: bit32
	var c: bit32
	var d: bit32
	var e: bit32

	{Initialize the first 16 words in the array w}
	for t(0, 15)
		do w[t] :: (context.messageBlock[t * 4    ] $ bit32).shl(24)
		do w[t] :: (context.messageBlock[t * 4 + 1] $ bit32).shl(16).or(w[t])
		do w[t] :: (context.messageBlock[t * 4 + 2] $ bit32).shl( 8).or(w[t])
		do w[t] :: (context.messageBlock[t * 4 + 3] $ bit32).or(w[t])
	end for

	for t(16, 79)
		do w[t] :: @circularShift(1, w[t - 3].xor(w[t - 8]).xor(w[t - 14]).xor(w[t - 16]))
	end for

	do a :: context.intermediateHash[0]
	do b :: context.intermediateHash[1]
	do c :: context.intermediateHash[2]
	do d :: context.intermediateHash[3]
	do e :: context.intermediateHash[4]

	for t(0, 19)
		do temp :: @circularShift(5, a) + b.and(c).or(b.not().and(d)) + e + w[t] + k[0]
		do e :: d
		do d :: c
		do c :: @circularShift(30, b)
		do b :: a
		do a :: temp
	end for

	for t(20, 39)
		do temp :: @circularShift(5, a) + b.xor(c).xor(d) + e + w[t] + k[1]
		do e :: d
		do d :: c
		do c :: @circularShift(30, b)
		do b :: a
		do a :: temp
	end for

	for t(40, 59)
		do temp :: @circularShift(5, a) + b.and(c).or(b.and(d)).or(c.and(d)) + e + w[t] + k[2]
		do e :: d
		do d :: c
		do c :: @circularShift(30, b)
		do b :: a
		do a :: temp
	end for

	for t(60, 79)
		do temp :: @circularShift(5, a) + b.xor(c).xor(d) + e + w[t] + k[3]
		do e :: d
		do d :: c
		do c :: @circularShift(30, b)
		do b :: a
		do a :: temp
	end for

	do context.intermediateHash[0] :+ a
	do context.intermediateHash[1] :+ b
	do context.intermediateHash[2] :+ c
	do context.intermediateHash[3] :+ d
	do context.intermediateHash[4] :+ e

	do context.messageBlockIndex :: 0
end func

func padMessage(context: @Context)
	if(context.messageBlockIndex > 55)
		do context.messageBlock[context.messageBlockIndex] :: 16#80b8
		do context.messageBlockIndex :+ 1
		while(context.messageBlockIndex < 64)
			do context.messageBlock[context.messageBlockIndex] :: 0b8
			do context.messageBlockIndex :+ 1
		end while

		do @processMessageBlock(context)

		while(context.messageBlockIndex < 56)
			do context.messageBlock[context.messageBlockIndex] :: 0b8
			do context.messageBlockIndex :+ 1
		end while
	else
		do context.messageBlock[context.messageBlockIndex] :: 16#80b8
		do context.messageBlockIndex :+ 1

		while(context.messageBlockIndex < 56)
			do context.messageBlock[context.messageBlockIndex] :: 0b8
			do context.messageBlockIndex :+ 1
		end while
	end if

	do context.messageBlock[56] :: (context.lengthHigh).shr(24) $ bit8
	do context.messageBlock[57] :: (context.lengthHigh).shr(16) $ bit8
	do context.messageBlock[58] :: (context.lengthHigh).shr(8) $ bit8
	do context.messageBlock[59] :: (context.lengthHigh) $ bit8
	do context.messageBlock[60] :: (context.lengthLow).shr(24) $ bit8
	do context.messageBlock[61] :: (context.lengthLow).shr(16) $ bit8
	do context.messageBlock[62] :: (context.lengthLow).shr(8) $ bit8
	do context.messageBlock[63] :: (context.lengthLow) $ bit8

	do @processMessageBlock(context)
end func
